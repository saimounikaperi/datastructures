Array is a collection of elements of same type placed in continuous memory locations.
Vectors are sequence containers representing arrays that can change in size. They are dynamic arrays.
Just like arrays, vectors are contiguous storage locations for their elements which means that their elements can also be accessed directly in O(1) time.
Vectors can be used to create dynamic 1D &2D Arrays.
Vectors grow in size once their memory allocation is filled. 
The original is deleted and 2x times of the existing memory is created again
Eg- 5 elements initially added, adding one more element will delete the vector create a new vector of 10 size
Unlike arrays, vectors are passed by value to a function- you may can still pass them by reference if need arises.

Falls in java.util Package and it implements the List interface
Iterable <- Extends Collection <- Extends List <- Implements vector <- Extends Stack 
Vector is very similar to ArrayList but Vector is synchronized and has some legacy methods which Collection framework doesn't have. 
The Iterators returned by the Vector class are fail-fast. In the case of concurrent modification, it fails and throws the ConcurrentModificationException.

public class Vector<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, Serializable

    It extends AbstractList and implements List interfaces.
    It implements Serializable, Cloneable, Iterable<E>, Collection<E>, List<E>, RandomAccess interfaces.
    The directly known subclass is Stack.
    
If the increment is specified, Vector will expand according to it in each allocation cycle. 
Still, if the increment is not specified, then the vector’s capacity gets doubled in each allocation cycle. 
Vector defines three protected data members:

    int capacityIncreament: Contains the increment value.
    int elementCount: Number of elements currently in vector stored in it.
    Object elementData[]: Array that holds the vector is stored in it.

Common Errors in the declaration of Vectors are as follows:

    Vector throws an IllegalArgumentException if the InitialSize of the vector defined is negative.
    If the specified collection is null, It throws NullPointerException.
    
Constructors:
--------------
    
Vector(): Creates a default vector of the initial capacity is 10.
	Vector<E> v = new Vector<E>();
Vector(int size): Creates a vector whose initial capacity is specified by size.
	Vector<E> v = new Vector<E>(int size);
Vector(int size, int incr): Creates a vector whose initial capacity is specified by size and increment is specified by incr. It specifies the number of elements to allocate each time a vector is resized upward.
	Vector<E> v = new Vector<E>(int size, int incr);
Vector(Collection c): Creates a vector that contains the elements of collection c.
	Vector<E> v = new Vector<E>(Collection c);

Methods in Vector Class
-------------------------
add(E e)	
	Appends the specified element to the end of this Vector.
add(int index, E element)
	Inserts the specified element at the specified position in this Vector.
addAll(Collection<? extends E> c)
	Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection’s Iterator.
addAll(int index,Collection<? extends E> c)
	Insert all of the elements in the specified Collection into this Vector at the specified position.
addElement(E obj)	
	Adds the specified component to the end of this vector, increasing its size by one.
capacity()	
	Returns the current capacity of this vector.
clear()	
	Removes all of the elements from this Vector.
clone()	
	Returns a clone of this vector.
contains(Object o)	
	Returns true if this vector contains the specified element.
containsAll(Collection<?> c)	
	Returns true if this Vector contains all of the elements in the specified Collection.
copyInto(Object[] anArray)	
	Copies the components of this vector into the specified array.
elementAt(int index)	
	Returns the component at the specified index.
elements()	
	Returns an enumeration of the components of this vector.
ensureCapacity(int minCapacity)	
	Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.
equals(Object o)	
	Compares the specified Object with this Vector for equality.
firstElement()	
	Returns the first component (the item at index 0) of this vector.
forEach(Consumer<? super E> action)
	Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.
get(int index)
	Returns the element at the specified position in this Vector.
hashCode()	
	Returns the hash code value for this Vector.
indexOf(Object o)	
	Returns the index of the first occurrence of the specified element in this vector,or -1 if this vector does not contain the element.
indexOf(Object o, int index)	
	Returns the index of the first occurrence of the specified element in this vector, searching forwards from the index, or returns -1 if the element is not found.
insertElementAt(E obj, int index)
	Inserts the specified object as a component in this vector at the specified index.
isEmpty()	
	Tests if this vector has no components.
iterator()	
	Returns an iterator over the elements in this list in a proper sequence.
lastElement()
	Returns the last component of the vector.
lastIndexOf(Object o)	
	Returns the index of the last occurrence of the specified element in this vector,or -1 if this vector does not contain the element.
lastIndexOf(Object o, int index)
	Returns the index of the last occurrence of the specified element in this vector, searching backward from the index, or returns -1 if the element is not found.
listIterator()	
	Returns a list iterator over the elements in this list (in proper sequence).
listIterator(int index)	
	Returns a list iterator over the elements in this list (in proper sequence),starting at the specified position in the list.
remove(int index)	
	Removes the element at the specified position in this Vector.
remove(Object o)	
	Removes the first occurrence of the specified element in this Vector. If the Vector does not contain the element, it is unchanged.
removeAll(Collection<?> c)	
	Removes from this Vector all of its elements contained in the specified Collection.
removeAllElements()	
	Removes all components from this vector and sets its size to zero.
removeElement(Object obj)	
	Removes the first (lowest-indexed) occurrence of the argument from this vector.
removeElementAt(int index)	
	Deletes the component at the specified index.
removeIf(Predicate<? super E> filter)	
	Removes all of the elements of this collection that satisfy the given predicate.
removeRange(int fromIndex,int toIndex)
	Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.
replaceAll(UnaryOperator<E> operator)	
	Replaces each element of this list with the result of applying the operator to that element.
retainAll(Collection<?> c)	
	Retains only the elements in this Vector contained in the specified Collection.
set(int index, E element)	
	Replaces the element at the specified position in this Vector with the specified element.
setElementAt(E obj, int index)
	Sets the component at the specified index of this vector to be the specified object.
setSize(int newSize)	
	Sets the size of this vector.
size()	
	Returns the number of components in this vector.
sort(Comparator<? super E> c)	
	Sorts this list according to the order induced by the specified Comparator.
spliterator()	
	Creates a late-binding and fail-fast Spliterator over the elements in this list.
subList(int fromIndex, int toIndex)	
	Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive.
toArray()	
	Returns an array containing all of the elements in this Vector in the correct order.
toArray(T[] a)	
	Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array.
toString()
	Returns a string representation of this Vector, containing the String representation of each element.
trimToSize()	
	Trims the capacity of this vector to be the vector’s current size.

    